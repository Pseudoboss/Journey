import random

import generics
import exceptions


class Entity:
    """The Entity base class.

    Attributes
    ----------
    name : str
        The in-game name of the Entity.
    level : int
        The level of the Entity.
        Should be proportional the stats and difficulty of the Entity.
    xp : int 
        The XP the Entity has.
    damage_range : range of ints
        The possible damage values the Entity can provide while attacking.

    """

    def __init__( self
                , name
                , level=1
                , xp=5
                , max_health=100
                , damage_range=range(1, 11)):
        """Instantiate a new Entity.

        Parameters
        ----------
        name : str
            The name for the new Entity.
        level : int
            The level for the new Entity.
            Should be proportional to the stats and difficulty of it.
        xp : int
            The xp the Entity has.
        max_health : int
            The maximum health the Entity has, and the health it starts with.
        damage_range : range of ints
            The possible damage values the Entity can provide while attacking.

        """
        self.name = name
        self.level = level
        self.xp = 5
        self.max_health = max_health
        self.health = max_health
        self.damage_range = damage_range

    @property
    def xp(self):
        return self._xp

    @xp.setter
    def xp(self, value):
        self._xp = value

    @property
    def max_health(self):
        """int: The maximum health the Entity has.
        All Entities start at full health.
        Cannot be 0 or less."""
        return self._max_health

    @max_health.setter
    def max_health(self, value):
        if value <= 0:
            raise ValueError("max_health cannot be 0 or less.")
        self._max_health = value

    @property
    def damage_range(self):
        """range of ints: The damage range that the Entity can have.
        Cannot be an empty range."""
        return self._damage_range

    @damage_range.setter
    def damage_range(self, value):
        if list(value) == []:
            raise ValueError("damage_range cannot be empty.")
        self._damage_range = value

    def attack(self, target):
        """Attack the provided target, passing an Attack to it.

        This method should not directly reduce the target's health. That should
        be handled by the target's take_attack method.

        Parameters
        ----------
        target : Entity or subclass of Entity
            The target to be attacked.

        Returns
        -------
        Attack
            The attack generated by this method.

        """
        damage = random.choice(self.damage_range)
        attack = generics.Attack(self, damage)
        try:
            target.take_attack(attack)
        except exceptions.DeathException as death:
            self.on_win(target)
            raise death
        return attack

    def take_attack(self, attack):
        """Take the provided attack.

        This method handles whether the attack landed or not, damage reduction,
        and reducing self.health.

        Parameters
        ----------
        attack : Attack
            The incoming attack.

        Returns
        -------
        int
            The Entity's remaining health.

        """
        self.health -= attack.damage
        if self.health <= 0:
            self.die(attack)
        return self.health

    def die(self, attack):
        """Die, raise DeathException to be handled elsewhere.

        Parameters
        ----------
        attack : Attack
            The attack that struck down this Entity.

        """
        raise exceptions.DeathException(self, attack)

    def on_win(self, target):
        """Called when the Entity kills a target.
        
        Currently does nothing.
        
        Parameters
        ---------
        target : Entity or subclass of Entity
            The Entity that the Entity won against.
        """
        pass

    def full_regen(self):
        """Regenerate all health."""
        self.health = self.max_health
